"use strict";(self.webpackChunkfullstack_devops_github_io=self.webpackChunkfullstack_devops_github_io||[]).push([[6e3],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,b=p["".concat(s,".").concat(d)]||p[d]||m[d]||c;return n?o.createElement(b,i(i({ref:t},u),{},{components:n})):o.createElement(b,i({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,i=new Array(c);i[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:r,i[1]=a;for(var l=2;l<c;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1013:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const c={title:"_ connect github"},i=void 0,a={unversionedId:"awesome-ci/cli/awesome-ci_connect_github",id:"awesome-ci/cli/awesome-ci_connect_github",title:"_ connect github",description:"awesome-ci connect github",source:"@site/docs/03-awesome-ci/02-cli/awesome-ci_connect_github.md",sourceDirName:"03-awesome-ci/02-cli",slug:"/awesome-ci/cli/awesome-ci_connect_github",permalink:"/docs/awesome-ci/cli/awesome-ci_connect_github",draft:!1,editUrl:"https://github.com/fullstack-devops/fullstack-devops.github.io/tree/main/docs/03-awesome-ci/02-cli/awesome-ci_connect_github.md",tags:[],version:"current",frontMatter:{title:"_ connect github"},sidebar:"default",previous:{title:"_ connect check",permalink:"/docs/awesome-ci/cli/awesome-ci_connect_check"},next:{title:"_ connect remove",permalink:"/docs/awesome-ci/cli/awesome-ci_connect_remove"}},s={},l=[{value:"awesome-ci connect github",id:"awesome-ci-connect-github",level:2},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"Auto generated by spf13/cobra on 25-Feb-2023",id:"auto-generated-by-spf13cobra-on-25-feb-2023",level:6}],u={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"awesome-ci-connect-github"},"awesome-ci connect github"),(0,r.kt)("p",null,"connect initial to a GitHub or GitHub Enterprise"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"awesome-ci connect github [flags]\n")),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  -h, --help                help for github\n  -r, --repository string   (required) repo eg.: octo-org/octo-repo\n  -s, --server string       (required) github instance to connect (default "https://github.com")\n  -t, --token string        (required) plain token eg.: ghp_*****\n')),(0,r.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  -v, --verbose   verbose output\n")),(0,r.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./awesome-ci_connect"},"awesome-ci connect"),"\t - connect persistent to github by creating an encrypted rc file")),(0,r.kt)("h6",{id:"auto-generated-by-spf13cobra-on-25-feb-2023"},"Auto generated by spf13/cobra on 25-Feb-2023"))}m.isMDXComponent=!0}}]);